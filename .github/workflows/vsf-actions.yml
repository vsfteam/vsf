name: vsf-build-actions

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  windows-msbuild:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        solution_path: [./example/template/project/vc/vsf_template.sln, ./example/tgui/project/vc/vsf_tgui.sln]
        build_config: [Debug]

    steps:
    - name: Checkout With Submodule
      uses: actions/checkout@v2
      with:
        submodules: true # without recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{matrix.solution_path}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{matrix.build_config}} ${{matrix.solution_path}}

  cmake-native-build:
    strategy:
      fail-fast: false
      matrix:
        cc: [gcc, clang]
        os: [ubuntu-latest]

    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # without recursive

    - name: install depends
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential clang ninja-build libsdl2-dev libusb-dev libusb-1.0
          echo "CMAKE_PATH=linux" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install gcc llvm sdl2
          echo "CMAKE_PATH=macos" >> $GITHUB_ENV
        else
          choco install mingw llvm cmake ninja sdl2
          echo "CMAKE_PATH=windows" >> $GITHUB_ENV
        fi
      shell: bash

    - name: configure cmake
      run: cmake -GNinja -S ${SOURCE_PATH} -B ${SOURCE_PATH}/build
      env:
        CC: ${{matrix.cc}}
        VSF_PATH: ${{github.workspace}}
        SOURCE_PATH: ${{github.workspace}}/example/template/project/cmake/${{env.CMAKE_PATH}}

    - name: build
      # Build your program with the given configuration
      run: cmake --build ${SOURCE_PATH}/build -v
      env:
        SOURCE_PATH: ${{github.workspace}}/example/template/project/cmake/${{env.CMAKE_PATH}}

  arm-cross-build:
    strategy:
      fail-fast: false
      matrix:
        target: [aic8800, m484, mps2]
        cc: ['10-2021.10', '9-2019-q4', '8-2019-q3']
        os: [ubuntu-latest]

    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # without recursive

    - name: get latest cmake and ninja
      uses: lukka/get-cmake@latest

    - name: arm-none-eabi-gcc
      uses: ryanwinter/arm-none-eabi-gcc@master
      with:
        release: ${{matrix.cc}}

    - name: install depends
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install sdl2
        fi
      shell: bash

    - name: configure cmake
      working-directory: ${{github.workspace}}/example/template/project/cmake/${{matrix.target}}
      run: |
        cmake --version
        cmake -GNinja -B ./build
      env:
        VSF_PATH: ${{github.workspace}}

    - name: build
      working-directory: ${{github.workspace}}/example/template/project/cmake/${{matrix.target}}
      run: cmake --build ./build -v
